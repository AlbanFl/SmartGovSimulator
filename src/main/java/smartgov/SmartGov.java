/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package smartgov;

import java.io.File;
import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import smartgov.core.environment.SmartGovContext;
import smartgov.core.main.SimulationBuilder;
import smartgov.core.main.SmartGovRuntime;
import smartgov.urban.osm.environment.OsmContext;

public class SmartGov {
	
	public static final Logger logger = LogManager.getLogger(SmartGov.class);
	
	private SimulationBuilder simulationBuilder;
	private SmartGovRuntime smartGovRuntime;
	
	/**
	 * Config File with parameters for simulations.
	 */
	// public static String configFile = FilePath.inputFolder + "config.ini";
	
	public SmartGov(SmartGovContext context) {
		logger.info("Starting SmartGov");
		simulationBuilder = new SimulationBuilder(context);
		
		ObjectMapper objectMapper = new ObjectMapper();
		String outputFolder = context.getFiles().getFile("outputFolder");
		
		File nodeOutput = new File(outputFolder + File.separator + "init_nodes.json");
		File arcOutput = new File(outputFolder + File.separator + "init_arcs.json");
		try {
			// Using maps is simpler when processed in JS, but IDs are duplicated.
			logger.info("Saving initial nodes to " + nodeOutput.getPath());
			objectMapper.writeValue(nodeOutput, context.nodes);
			
			logger.info("Saving initial arcs to " + arcOutput.getPath());
			objectMapper.writeValue(arcOutput, context.arcs);
		} catch (JsonGenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		smartGovRuntime = new SmartGovRuntime(context);
	}

    public static void main(String[] args) {
        SmartGov smartGov = new SmartGov(new OsmContext(args[0]));
        smartGov.getRuntime().start(100);
    }
    
    public SimulationBuilder getSimulationBuilder() {
    	return simulationBuilder;
    }
    
    public SmartGovRuntime getRuntime() {
    	return smartGovRuntime;
    }
}
