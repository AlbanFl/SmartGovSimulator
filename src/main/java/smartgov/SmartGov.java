/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package smartgov;

import java.io.File;
import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.fasterxml.jackson.databind.ObjectMapper;

import smartgov.core.environment.SmartGovContext;
import smartgov.core.events.EventHandler;
import smartgov.core.main.SimulationBuilder;
import smartgov.core.main.SmartGovRuntime;
import smartgov.core.main.events.SimulationStopped;
import smartgov.models.lez.environment.LezContext;
import smartgov.urban.osm.environment.OsmContext;

public class SmartGov {
	
	public static final Logger logger = LogManager.getLogger(SmartGov.class);
	
	private SmartGovContext context;
	private SimulationBuilder simulationBuilder;
	private static SmartGovRuntime smartGovRuntime;
	
	/**
	 * Config File with parameters for simulations.
	 */
	// public static String configFile = FilePath.inputFolder + "config.ini";
	
	public SmartGov(SmartGovContext context) {
		logger.info("Starting SmartGov");
		this.context = context;
		simulationBuilder = new SimulationBuilder(context);
		smartGovRuntime = new SmartGovRuntime(context);
		
		ObjectMapper objectMapper = new ObjectMapper();
		String outputFolder = context.getFiles().getFile("outputFolder");
		
		File nodeOutput = new File(outputFolder + File.separator + "init_nodes.json");
		File arcOutput = new File(outputFolder + File.separator + "init_arcs.json");

		try {
			// Using maps is simpler when processed in JS, but IDs are duplicated.
			logger.info("Saving initial nodes to " + nodeOutput.getPath());
			objectMapper.writeValue(nodeOutput, context.nodes);
			
			logger.info("Saving initial arcs to " + arcOutput.getPath());
			objectMapper.writeValue(arcOutput, context.arcs);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

    public static void main(String[] args) {
        SmartGov smartGov = new SmartGov(new LezContext(args[0]));
        getRuntime().addSimulationStoppedListener(new EventHandler<SimulationStopped>() {

			@Override
			public void handle(SimulationStopped event) {
				String outputFolder = smartGov.getContext().getFiles().getFile("outputFolder");
				File agentOutput = new File(outputFolder + File.separator + "agents_" + getRuntime().getTickCount() +".json");
				File arcsOutput = new File(outputFolder + File.separator + "arcs_" + getRuntime().getTickCount() +".json");
				
				
				ObjectMapper objectMapper = new ObjectMapper();

				try {
					logger.info("Saving agents state to " + agentOutput.getPath());
					objectMapper.writeValue(agentOutput, smartGov.getContext().agents);
					
					logger.info("Saving arcs state to " + agentOutput.getPath());
					objectMapper.writeValue(arcsOutput, smartGov.getContext().arcs);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
        	
        });
        getRuntime().start(100);
    }
    
    public SmartGovContext getContext() {
    	return context;
    }
    
    public SimulationBuilder getSimulationBuilder() {
    	return simulationBuilder;
    }
    
    public static SmartGovRuntime getRuntime() {
    	return smartGovRuntime;
    }
}
